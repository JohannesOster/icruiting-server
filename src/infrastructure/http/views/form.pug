html
  head
    title icruiting-webform
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    script(src='https://sdk.amazonaws.com/js/aws-sdk-2.680.0.min.js')
    link(
      rel='stylesheet',
      type='text/css',
      href='https://cdn.jsdelivr.net/gh/JohannesOster/icruiting-theme-kit/base-theme/index.css'
    )
    script
      include ic-iframe-resize.js
      include ic-onSubmit.js
    if theme
      link(href=theme, rel='stylesheet')

  body(onload='post_iframe_size();')
    if error
      p.ic-font-300 Ein Fehler ist aufgetreten #{error}
    else
      #ic-iframe-container
        form.icruiting(
          method='POST',
          id=formId,
          action=submitAction,
          enctype='multipart/form-data',
          onSubmit='onSubmit()'
        )
          each formField in formFields
            .field-container
              if formField.component !== "section_header"
                label(for=formField.formFieldId) #{formField.label}
                  if formField.required
                    span.req *
                if formField.description
                  span.desc #{formField.description}
              case formField.component
                when "section_header"
                  h3 #{formField.label}
                  if formField.description
                    span.desc #{formField.description}
                when "input"
                  input(
                    id=formField.formFieldId,
                    name=formField.formFieldId,
                    placeholder=formField.placeholder,
                    required=formField.required,
                    type=(formField.props && formField.props.type) || "text"
                  )
                when "textarea"
                  textarea(
                    id=formField.formFieldId,
                    name=formField.formFieldId,
                    placeholder=formField.placeholder,
                    required=formField.required
                  )
                when "select"
                  select(
                    id=formField.formFieldId,
                    name=formField.formFieldId,
                    required=formField.required
                  )
                    each option in formField.options
                      option(value=option.value) #{option.label}
                when "radio"
                  .radio-options-container
                    each option in formField.options
                      .radio-option-container
                        input(
                          type='radio',
                          id=formFieldformFieldId + "-" + option.value,
                          name=formField.formFieldId,
                          value=option.value,
                          checked=formField.defaultValue === option.value,
                          required=formField.required
                        )
                        label.radio-option-label(
                          for=formFieldformFieldId + "-" + option.value
                        ) #{option.label}
                when "checkbox"
                  .checkbox-options-container
                    each option in formField.options
                      .checkbox-option-container
                        input(
                          type='checkbox',
                          id=formFieldformFieldId + "-" + option.value,
                          name=formField.formFieldId,
                          value=option.value,
                          checked=formField.defaultValue === option.value,
                          required=formField.required && formField.options.length === 1
                        )
                        label.checkbox-option-label(
                          for=formFieldformFieldId + "-" + option.value
                        ) #{option.label}
                when "file_upload"
                  input(
                    type='hidden',
                    name=formField.formFieldId,
                    id=`fileKey-${formField.formFieldId}`
                  )
                  input(
                    type='file',
                    name=formField.formFieldId,
                    accept=(formField.props && formField.props.accept) || "application/pdf, image/jpeg",
                    required=formField.required
                  )
                default: span Invalides Formularelement
          div
            button#ic-submit-button.submit-button(type='submit')
              span.submitt-button-label Absenden
              .spinner-container
                span.spinner
